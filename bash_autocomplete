#! /bin/bash

#############################################################################################################################
#
# Examples and Explanations
# https://devmanual.gentoo.org/tasks-reference/completion/index.html
# Other info inline
# Variables
#   COMP_LINE       : current command line
#   COMP_WORDS      : array of individual words on COMP_LINE
#   COMP_CWORD      : index into COMP_WORDS of the word containing current cursor position
#   COMP_POINT      : index of the current cursor position relative to the beginning of the current command
#   COMP_WORDBREAKS : set of characters that the Readline library treats as word separators when performing word completion
#   COMPREPLY       : array variable from which bash reads the possible completions generated by a completion function
# Completion related bash builtins
#   compgen   : Display the possible completions depending on the options
#   complete  : For each NAME, specify how arguments are to be completed.
#############################################################################################################################

: ${PROG:=$(basename ${BASH_SOURCE})}

_cli_bash_autocomplete() {
    # declare local variables for use
    local cur opts base
    # resets COMPREPLY array
    COMPREPLY=()
    # sets local cur variable to the current word of the command line, if the current command line ${COMP_LINE} is 'foo --fil' ${cur} would be '--fil'
    #   if the current command line is 'foo --fil ' (note the space at the end) then ${cur} would be null
    cur="${COMP_WORDS[COMP_CWORD]}"
    # sets local prev variable to previous word to the end 'the word before ${cur}'
    #prev="${COMP_WORDS[COMP_CWORD]-1}"
    # if cur starts with a dash (flag) or index is 1
    #if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then
      # obtain options from application by calling it with command so far and --generate-bash-completion
      opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} --generate-bash-completion )
      # if opts are empty show local directory contents
      optsize=${#opts}
      if [[ "$optsize" -eq 0 ]]; then
        opts=$(for x in $(ls) ; do \
         						echo ${x##*/} ; \
         						done)
      fi
      # show options available for current command
      COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
      return 0
    #fi

    # other options
    #case "${prev}" in
      # do something if prev is something specific
    #  -f|--file)
    #    COMPREPLY=( $(compgen -f ? ${cur}) )
    #  ;;
    #esac
    #return 0
}

# tells Bash to use the _cli_bash_autocomplete function to generate any completions for the $PROG application/function
complete -F _cli_bash_autocomplete $PROG

unset PROG
